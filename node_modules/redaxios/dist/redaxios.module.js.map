{"version":3,"file":"redaxios.module.js","sources":["../src/interceptor.js","../src/index.js"],"sourcesContent":["/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction Interceptor() {\n\t/**\n\t * @type {Array<{done: Function, error: Function } | null>}\n\t */\n\tthis.handlers = [];\n\n\t/**\n\t * Register an interceptor\n\t * @param {Function} done\n\t * @param {Function} [error]\n\t * @returns {number} The interceptor Id to be used for ejection\n\t */\n\tthis.use = function (done, error) {\n\t\tthis.handlers.push({\n\t\t\tdone,\n\t\t\terror: error || (() => {})\n\t\t});\n\n\t\treturn this.handlers.length - 1;\n\t};\n\n\t/**\n\t * @param {number} id - A registered interceptor Id\n\t */\n\tthis.eject = function (id) {\n\t\tif (this.handlers[id]) this.handlers[id] = null;\n\t};\n}\n\nexport default Interceptor;\n","/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Interceptor from './interceptor';\n\n/**\n * @public\n * @typedef Options\n * @property {string} [url] the URL to request\n * @property {'get'|'post'|'put'|'patch'|'delete'|'options'|'head'|'GET'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS'|'HEAD'} [method=\"get\"] HTTP method, case-insensitive\n * @property {Headers} [headers] Request headers\n * @property {FormData|string|object} [body] a body, optionally encoded, to send\n * @property {'text'|'json'|'stream'|'blob'|'arrayBuffer'|'formData'|'stream'} [responseType=\"json\"] An encoding to use for the response\n * @property {Record<string,any>|URLSearchParams} [params] querystring parameters\n * @property {(params: Options['params']) => string} [paramsSerializer] custom function to stringify querystring parameters\n * @property {boolean} [withCredentials] Send the request with credentials like cookies\n * @property {string} [auth] Authorization header value to send with the request\n * @property {string} [xsrfCookieName] Pass an Cross-site Request Forgery prevention cookie value as a header defined by `xsrfHeaderName`\n * @property {string} [xsrfHeaderName] The name of a header to use for passing XSRF cookies\n * @property {(status: number) => boolean} [validateStatus] Override status code handling (default: 200-399 is a success)\n * @property {Array<(body: any, headers: Headers) => any?>} [transformRequest] An array of transformations to apply to the outgoing request\n * @property {string} [baseURL] a base URL from which to resolve all URLs\n * @property {typeof window.fetch} [fetch] Custom window.fetch implementation\n * @property {any} [data]\n */\n\n/**\n * @public\n * @typedef Headers\n * @type {{[name: string]: string}}\n */\n\n/**\n * @public\n * @template T\n * @typedef Response\n * @property {number} status\n * @property {string} statusText\n * @property {Options} config the request configuration\n * @property {T} data the decoded response body\n * @property {Headers} headers\n * @property {boolean} redirect\n * @property {string} url\n * @property {ResponseType} type\n * @property {ReadableStream<Uint8Array> | null} body\n * @property {boolean} bodyUsed\n */\n\n/**\n * @typedef BodylessMethod\n * @type {<T=any>(url: string, config?: Options) => Promise<Response<T>>}\n */\n\n/**\n * @typedef BodyMethod\n * @type {<T=any>(url: string, body?: any, config?: Options) => Promise<Response<T>>}\n */\n\n/** */\nexport default (function create(/** @type {Options} */ defaults) {\n\tdefaults = defaults || {};\n\n\t/**\n\t * @public\n\t * @template T\n\t * @type {(<T = any>(config?: Options) => Promise<Response<T>>) | (<T = any>(url: string, config?: Options) => Promise<Response<T>>)}\n\t */\n\tredaxios.request = redaxios;\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.get = (url, config) => redaxios(url, config, 'get');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.delete = (url, config) => redaxios(url, config, 'delete');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.options = (url, config) => redaxios(url, config, 'options');\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.post = (url, data, config) => redaxios(url, config, 'post', data);\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.put = (url, data, config) => redaxios(url, config, 'put', data);\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.patch = (url, data, config) => redaxios(url, config, 'patch', data);\n\n\t/** @public */\n\tredaxios.all = Promise.all;\n\n\t/**\n\t * @public\n\t * @template T,R\n\t * @param {(...args: T[]) => R} fn\n\t * @returns {(array: T[]) => R}\n\t */\n\tredaxios.spread = function (fn) {\n\t\treturn function (results) {\n\t\t\treturn fn.apply(this, results);\n\t\t};\n\t};\n\t// 3b smaller:\n\t// redaxios.spread = (fn) => /** @type {any} */ (fn.apply.bind(fn, fn));\n\n\t/** @public */\n\tredaxios.interceptors = {\n\t\trequest: new Interceptor(),\n\t\tresponse: new Interceptor()\n\t};\n\n\t/**\n\t * @private\n\t * @param {Record<string,any>} opts\n\t * @param {Record<string,any>} [overrides]\n\t * @param {boolean} [lowerCase]\n\t * @returns {Partial<opts>}\n\t */\n\tfunction deepMerge(opts, overrides, lowerCase) {\n\t\tlet out = {},\n\t\t\ti;\n\t\tif (Array.isArray(opts)) {\n\t\t\treturn opts.concat(overrides);\n\t\t}\n\t\tfor (i in opts) {\n\t\t\tconst key = lowerCase ? i.toLowerCase() : i;\n\t\t\tout[key] = opts[i];\n\t\t}\n\t\tfor (i in overrides) {\n\t\t\tconst key = lowerCase ? i.toLowerCase() : i;\n\t\t\tconst value = /** @type {any} */ (overrides)[i];\n\t\t\tout[key] = key in out && typeof value == 'object' ? deepMerge(out[key], value, key === 'headers') : value;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * Issues a request.\n\t * @public\n\t * @template T\n\t * @param {string | Options} url\n\t * @param {Options} [config]\n\t * @param {any} [_method]\n\t * @param {any} [_data]\n\t * @returns {Promise<Response<T>>}\n\t */\n\tfunction redaxios(url, config, _method, _data) {\n\t\tlet _url = '';\n\t\tif (typeof url !== 'string') {\n\t\t\tconfig = url;\n\t\t\tif (config.url !== undefined) {\n\t\t\t\t_url = config.url;\n\t\t\t}\n\t\t} else {\n\t\t\t_url = url;\n\t\t}\n\n\t\tlet response = /** @type {Response<any>} */ ({ config });\n\n\t\t/** @type {Options} */\n\t\tlet options = deepMerge(defaults, config);\n\n\t\tif (_data) options.data = _data;\n\n\t\tredaxios.interceptors.request.handlers.map((handler) => {\n\t\t\tif (handler) {\n\t\t\t\tconst resultConfig = handler.done(options);\n\t\t\t\toptions = deepMerge(options, resultConfig || {});\n\t\t\t}\n\t\t});\n\n\t\tlet data = options.data;\n\n\t\t/** @type {Headers} */\n\t\tconst customHeaders = {};\n\n\t\t(options.transformRequest || []).map((f) => {\n\t\t\tdata = f(data, options.headers || {}) || data;\n\t\t});\n\n\t\tif (data && typeof data === 'object' && typeof data.append !== 'function') {\n\t\t\tdata = JSON.stringify(data);\n\t\t\tcustomHeaders['content-type'] = 'application/json';\n\t\t}\n\n\t\tconst m = document.cookie.match(RegExp('(^|; )' + options.xsrfCookieName + '=([^;]*)'));\n\t\tif (m && options.xsrfHeaderName) customHeaders[options.xsrfHeaderName] = m[2];\n\n\t\tif (options.auth) {\n\t\t\tcustomHeaders.authorization = options.auth;\n\t\t}\n\n\t\tif (options.baseURL) {\n\t\t\t_url = new URL(_url, options.baseURL) + '';\n\t\t}\n\n\t\tif (options.params) {\n\t\t\tconst divider = ~_url.indexOf('?') ? '&' : '?';\n\t\t\tconst query = options.paramsSerializer\n\t\t\t\t? options.paramsSerializer(options.params)\n\t\t\t\t: new URLSearchParams(options.params);\n\t\t\t_url += divider + query;\n\t\t}\n\n\t\tconst fetchFunc = options.fetch || fetch;\n\n\t\treturn fetchFunc(_url, {\n\t\t\tmethod: _method || options.method,\n\t\t\tbody: data,\n\t\t\theaders: deepMerge(options.headers || {}, customHeaders, true),\n\t\t\tcredentials: options.withCredentials ? 'include' : undefined\n\t\t}).then((res) => {\n\t\t\tfor (const i in res) {\n\t\t\t\tif (typeof res[i] != 'function') response[i] = res[i];\n\t\t\t}\n\n\t\t\tconst ok = options.validateStatus ? options.validateStatus(res.status) : res.ok;\n\t\t\tif (!ok) {\n\t\t\t\tredaxios.interceptors.response.handlers.map((handler) => {\n\t\t\t\t\tif (handler && handler.error) {\n\t\t\t\t\t\thandler.error(res);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconst error = Promise.reject(response);\n\t\t\t\tredaxios.interceptors.request.handlers.map((handler) => {\n\t\t\t\t\tif (handler && handler.error) {\n\t\t\t\t\t\thandler.error(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\treturn res[options.responseType || 'text']()\n\t\t\t\t.then(\n\t\t\t\t\t/** @param {string} data */ (data) => {\n\t\t\t\t\t\tresponse.data = data;\n\t\t\t\t\t\tresponse.data = JSON.parse(data);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.catch(Object)\n\t\t\t\t.then(() => {\n\t\t\t\t\tredaxios.interceptors.response.handlers.map((handler) => {\n\t\t\t\t\t\tresponse = (handler && handler.done(response)) || response;\n\t\t\t\t\t});\n\t\t\t\t\treturn response;\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @type {AbortController}\n\t */\n\tredaxios.CancelToken = /** @type {any} */ (typeof AbortController == 'function' ? AbortController : Object);\n\n\t/**\n\t * @public\n\t * @type {Options}\n\t */\n\tredaxios.defaults = defaults;\n\n\t/**\n\t * @public\n\t */\n\tredaxios.create = create;\n\n\treturn redaxios;\n})();\n"],"names":["Interceptor","handlers","use","done","error","push","this","length","eject","id","create","defaults","deepMerge","opts","overrides","lowerCase","i","out","Array","isArray","concat","toLowerCase","key","value","redaxios","url","config","_method","_data","_url","undefined","response","options","data","interceptors","request","map","handler","resultConfig","customHeaders","transformRequest","f","headers","append","JSON","stringify","m","document","cookie","match","RegExp","xsrfCookieName","xsrfHeaderName","auth","authorization","baseURL","URL","params","divider","indexOf","paramsSerializer","URLSearchParams","fetch","method","body","credentials","withCredentials","then","res","const","validateStatus","status","ok","Promise","reject","responseType","parse","catch","Object","get","delete","post","put","patch","all","spread","fn","results","apply","CancelToken","AbortController"],"mappings":"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"}